# ============================================================================
# RemarkMessage 实体定义
# ============================================================================
# 这是核心数据实体，对应合约中的 RemarkMsg 事件
# 每个事件都会创建一个 RemarkMessage 记录
# ============================================================================
type RemarkMessage @entity {
  # 唯一标识符，使用 transactionHash + logIndex 组合
  # 确保每个事件都有唯一的ID，避免重复记录
  id: Bytes!
  
  # 发送者地址，对应事件中的 sender 参数
  # indexed 字段，可以高效查询特定用户的所有消息
  sender: Bytes!
  
  # 用户实体引用，建立与User实体的关联
  # 用于支持@derivedFrom功能
  user: User!
  
  # 时间戳，对应事件中的 timestamp 参数
  # 使用 BigInt 类型处理大整数，避免精度丢失
  timestamp: BigInt!
  
  # 原始数据，对应事件中的 bytes data 参数
  # 存储用户提交的原始16进制数据
  data: Bytes!
  
  # 解码后的可读数据
  # 将 bytes 数据转换为 UTF-8 字符串，便于前端显示
  # 如果解码失败，则存储原始16进制字符串
  decodedData: String!
  
  # 区块号，记录事件发生的区块
  # 用于排序和时间线查询
  blockNumber: BigInt!
  
  # 区块时间戳，更精确的时间信息
  # 与事件中的 timestamp 不同，这是区块生成时间
  blockTimestamp: BigInt!
  
  # 交易哈希，可以追溯到具体的交易
  # 用于在区块链浏览器中查看交易详情
  transactionHash: Bytes!
  
  # Gas 使用量，记录交易消耗的 Gas
  # 用于费用分析和统计
  gasUsed: BigInt!
  
  # Gas 价格，记录交易的 Gas Price
  # 用于费用计算和网络状态分析
  gasPrice: BigInt!
}

# ============================================================================
# User 实体定义
# ============================================================================
# 聚合用户维度的数据，提供用户级别的统计信息
# 一个用户对应多个消息记录
# ============================================================================
type User @entity {
  # 用户地址作为唯一标识符
  id: Bytes!
  
  # 用户发送的消息总数
  # 每次用户发送消息时自动递增
  totalMessages: BigInt!
  
  # 用户发送的第一条消息时间
  # 用于分析用户首次使用时间
  firstMessageAt: BigInt!
  
  # 用户发送的最后一条消息时间
  # 用于分析用户最近活跃时间
  lastMessageAt: BigInt!
  
  # 用户发送的总数据量（字节数）
  # 累计所有消息的数据大小
  totalDataSize: BigInt!
  
  # 用户消费的总 Gas 费用
  # 累计所有交易的 Gas 消耗
  totalGasCost: BigInt!
  
  # 关联的所有消息记录
  # @derivedFrom 自动建立反向关联，无需手动维护
  messages: [RemarkMessage!]! @derivedFrom(field: "user")
}

# ============================================================================
# DailyStats 实体定义
# ============================================================================
# 按日统计的数据，用于生成图表和趋势分析
# 每天生成一条记录，记录当日的活动情况
# ============================================================================
type DailyStats @entity {
  # 日期作为唯一标识符，格式：YYYY-MM-DD
  # 例如：2024-01-15
  id: Bytes!
  
  # 日期时间戳，便于排序和查询
  date: BigInt!
  
  # 当日消息总数
  messageCount: BigInt!
  
  # 当日活跃用户数
  # 发送至少一条消息的用户数量
  activeUsers: BigInt!
  
  # 当日新用户数
  # 首次发送消息的用户数量
  newUsers: BigInt!
  
  # 当日数据总量（字节数）
  totalDataSize: BigInt!
  
  # 当日平均消息大小
  averageMessageSize: BigInt!
  
  # 当日总 Gas 消耗
  totalGasUsed: BigInt!
  
  # 当日平均 Gas 价格
  averageGasPrice: BigInt!
}

# ============================================================================
# GlobalStats 实体定义
# ============================================================================
# 全局统计数据，记录整个系统的累计指标
# 只有一条记录，每次有新事件时更新
# ============================================================================
type GlobalStats @entity {
  # 固定ID，确保只有一条全局统计记录
  id: Bytes!
  
  # 消息总数，系统启动以来的累计值
  totalMessages: BigInt!
  
  # 用户总数，注册过的用户数量
  totalUsers: BigInt!
  
  # 总数据量，累计存储的数据字节数
  totalDataSize: BigInt!
  
  # 最后更新时间，记录统计数据的最后更新时间
  lastUpdated: BigInt!
  
  # 最后更新的区块号
  lastBlockNumber: BigInt!
  
  # 总 Gas 消耗，累计所有交易的 Gas 使用量
  totalGasUsed: BigInt!
  
  # 平均消息大小，总数据量除以消息数量
  averageMessageSize: BigInt!
}

# ============================================================================
# MessageByHour 实体定义
# ============================================================================
# 按小时统计的消息数量，用于分析用户活跃时间段
# 每小时生成一条记录
# ============================================================================
type MessageByHour @entity {
  # 小时标识符，格式：YYYY-MM-DD-HH
  # 例如：2024-01-15-14 表示 2024年1月15日14点
  id: Bytes!
  
  # 小时时间戳
  hour: BigInt!
  
  # 该小时的消息数量
  messageCount: BigInt!
  
  # 该小时的活跃用户数
  activeUsers: BigInt!
  
  # 该小时的数据总量
  totalDataSize: BigInt!
} 